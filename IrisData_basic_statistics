{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":23404,"sourceType":"datasetVersion","datasetId":17860}],"dockerImageVersionId":30664,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/iammbrn/irisdata?scriptVersionId=167794170\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Temel İstatistik ve Veri Okuryazarlığı\n\n## İstatistik Nedir?\nİstatistik veya sayım bilimi, belirli bir amaç için veri toplama, tablo ve grafiklerle özetleme, sonuçları yorumlama, sonuçların güven derecelerini açıklama, örneklerden elde edilen sonuçları kitle için genelleme, özellikler arasındaki ilişkiyi araştırma, çeşitli konularda geleceğe ilişkin tahmin yapma, deney düzenleme ve gözlem ilkelerini kapsayan bir bilimdir. Belirli bir amaç için verilerin toplanması, sınıflandırılması, çözümlenmesi ve sonuçlarının yorumlanması esasına dayanır. **Vikipedi**\n\n## Veri Okuryazarlığı Nedir? \nVeri okuryazarlığı, verileri okuma, çalışma, analiz etme ve verilerle tartışma yeteneği olarak tanımlanmaktadır. Veri kümelerine kolay erişim, bu becerileri uygulamak için çok önemlidir. **Vikipedi**\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd #datayi (CSV veya başka kaynakalardan) okutmak için pandas kütüphanesini dahil ettik.","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:16:21.619191Z","iopub.execute_input":"2024-03-19T12:16:21.62028Z","iopub.status.idle":"2024-03-19T12:16:22.926007Z","shell.execute_reply.started":"2024-03-19T12:16:21.62023Z","shell.execute_reply":"2024-03-19T12:16:22.924602Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"data_bus='/kaggle/input/iris-flower-dataset/IRIS.csv' #data yolunu data_bus değişkenine atadık.\n\ndata=pd.read_csv(data_bus) #pandas kütühanesindeki read_cvs fonksiyonunu kullanarak data_bus dosyasındaki veriler okundu ve data değişkenine atandı.\n\ndata.describe() # data içindeki verinin istatistiksel özetini oluşturur.","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:16:22.928881Z","iopub.execute_input":"2024-03-19T12:16:22.92953Z","iopub.status.idle":"2024-03-19T12:16:22.986154Z","shell.execute_reply.started":"2024-03-19T12:16:22.929431Z","shell.execute_reply":"2024-03-19T12:16:22.984779Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"       sepal_length  sepal_width  petal_length  petal_width\ncount    150.000000   150.000000    150.000000   150.000000\nmean       5.843333     3.054000      3.758667     1.198667\nstd        0.828066     0.433594      1.764420     0.763161\nmin        4.300000     2.000000      1.000000     0.100000\n25%        5.100000     2.800000      1.600000     0.300000\n50%        5.800000     3.000000      4.350000     1.300000\n75%        6.400000     3.300000      5.100000     1.800000\nmax        7.900000     4.400000      6.900000     2.500000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n      <th>petal_length</th>\n      <th>petal_width</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>150.000000</td>\n      <td>150.000000</td>\n      <td>150.000000</td>\n      <td>150.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.843333</td>\n      <td>3.054000</td>\n      <td>3.758667</td>\n      <td>1.198667</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.828066</td>\n      <td>0.433594</td>\n      <td>1.764420</td>\n      <td>0.763161</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>4.300000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>0.100000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5.100000</td>\n      <td>2.800000</td>\n      <td>1.600000</td>\n      <td>0.300000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>5.800000</td>\n      <td>3.000000</td>\n      <td>4.350000</td>\n      <td>1.300000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.400000</td>\n      <td>3.300000</td>\n      <td>5.100000</td>\n      <td>1.800000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.900000</td>\n      <td>4.400000</td>\n      <td>6.900000</td>\n      <td>2.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.columns #Elimizdeki veride bulunan kolonları görmek için kullanırız.","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:16:22.987975Z","iopub.execute_input":"2024-03-19T12:16:22.988319Z","iopub.status.idle":"2024-03-19T12:16:22.995646Z","shell.execute_reply.started":"2024-03-19T12:16:22.98829Z","shell.execute_reply":"2024-03-19T12:16:22.994327Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"Index(['sepal_length', 'sepal_width', 'petal_length', 'petal_width',\n       'species'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1-) Aritmetik Ortalama(average) Bulma:\n\n  * **Aritmetik Ortalama** bir sayı dizisindeki sayıların toplamının, sayı dizisindeki sayıların sayı adedine bölümü ile elde edilen sonuçtur.\n   \n  * **Örnek:** **Dizi=[1+2+3+4+5]** diye bir dizimiz olsun bu dizideki elamanların **Aritmetik Ortalaması=(toplam=(n * n+1)/2)/(sayı adedi=n)**\n    \n  * **Aritmetik Ortalaması=15/5=3 tür.**  \n     ","metadata":{}},{"cell_type":"code","source":"def find_Average(array):  #find_Average fonksiyonu parametre olarak verilen dizininin elemanlarının Aritmetik ortalamasını değer olarak döndürüen fonksiyondur.\n    total=0 \n    average=0\n    data_count=0\n    for i in array:  #datanın sepal_lenght sütunundaki verilere tek tek ulaşıp total değişkenine eklemek için kullanırız.\n        total+=i \n        data_count+=1\n\n    average=total/data_count  # bulduğumuz toplam ve veri sayısını kullanrak bu verilerin ortalamasına ulaşırız.\n    return average\n    \nprint(\"Average of sepal_length values=\",find_Average(data[\"sepal_length\"])) #Verilerin ortalaması ekran çıktısı olarak verilir.","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:16:22.997837Z","iopub.execute_input":"2024-03-19T12:16:22.998188Z","iopub.status.idle":"2024-03-19T12:16:23.008851Z","shell.execute_reply.started":"2024-03-19T12:16:22.998158Z","shell.execute_reply":"2024-03-19T12:16:23.007527Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Average of sepal_length values= 5.843333333333335\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 2-) Mod (Tepe Değer) Bulma:\n\n  * **Mod** bir sayı dizisinde en çok tekrar eden değerdir.\n  \n  * **Örnek:** Dizi=[**300**,400,**300**,600,**300**,400] diye bir dizimiz olsun bu dizinin **Mod=dizi içinde en çok tekrar eden eleman**\n  \n  * **Mod=300** dür.","metadata":{}},{"cell_type":"code","source":"import time   #time kütüphanesini programı biraz bekletip sonra çıktı vermesi için kullandım.\n\ndef find_Mode(array):   #find_Mod fonksiyonu parametre olarak veilen dizi içindeki mod elemanını ve bu elemanın dizideki frekansını(tekrar sayısını) değer olarak döndürür.\n    dictionary=dict()\n    for number in array:\n        if number in dictionary:\n            dictionary[number] += 1\n        else:\n            dictionary[number] = 1\n    max_count = 0\n    mod=None\n\n    for number,count in dictionary.items():  #sözlük key(anahtar) ve value(değer) değerileri bir liste içinde demet olarak number ve count değişkenlerine sırasıyla atanır.\n        if(count>max_count):\n            max_count=count\n            mod=number\n\n    return mod\n\n\nprint(\"The program is running :)\")\ntime.sleep(3)      # programı bir saniye bekletir ve çalıştırmaya devam eder.    \nprint(\"The mode of this number sequence is {}.\".format(find_Mode(data[\"petal_length\"]))) # find_Mode fonksiyonula petal_length dizisinde bulunan verilerin modunu bulur.\n    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:16:46.982436Z","iopub.execute_input":"2024-03-19T12:16:46.982969Z","iopub.status.idle":"2024-03-19T12:16:49.998236Z","shell.execute_reply.started":"2024-03-19T12:16:46.982928Z","shell.execute_reply":"2024-03-19T12:16:49.996975Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"The program is running :)\nThe mode of this number sequence is 1.5.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 3-) Medyan(Ortanca) Bulma:\n    \n   * **Medyan** sıralanmış bir sayısal dizide dizinin ortasında bulunan sayıdır. Eğer dizinin elaman sayısı Çift ise bu durumda dizinin ortasında     bulunan iki elemanın aritmetik ortalaması dizinin medyan değeri olur.\n   * **Tek** sayıda elemanı bulunan dizide medyan ortadaki sayıdır.\n   \n   * **Örnek:** **Dizi=[100,300,600,800,900,1000]** diye sayısal bir dizimiz olsun. Bu sayısal dizinin **Medyanı** eleman sayısına bağlıdır.**eleman sayısı çift** olduğu için Medyan ortadaki iki elemanın Aritmetik ortalamasına eşit olur. **Medyan=(600+800)/2=700'** dür.\n   * **Örnek:** **Dizi=[1,2,3,4,5]** diye bir dizimiz olsun. Bu dizinin **Medyanı** **eleman sayısı tek** olduğu için ortadaki elemana eşittir. **Medyan=3'** tür.\n    ","metadata":{}},{"cell_type":"code","source":"def find_Median(array): # find_Median fonksiyonu dizinin elaman sayısına bakarak bu dizinin ortanca değerini değer olarak dödürür.\n    if(len(array)%2!=0):  #eleman sayısı tek ise.    \n        index=round(len(array)/2)\n        return array[index]\n\n    else:  #eleman sayısı çift ise.\n        index=int((len(array))/2)\n        average=(array[index]+array[index-1])/2\n        return average\n\nprint(\"The median of this series of numbers= {}\".format(find_Median(data[\"petal_width\"]))) # find_Mode fonksiyonula petal_width dizisinde bulunan verilerin medyanını bulur.","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:22:08.244442Z","iopub.execute_input":"2024-03-19T12:22:08.245865Z","iopub.status.idle":"2024-03-19T12:22:08.254357Z","shell.execute_reply.started":"2024-03-19T12:22:08.245822Z","shell.execute_reply":"2024-03-19T12:22:08.253164Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"The median of this series of numbers= 1.35\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 4-) Min Değer, Max Değer ve Değer Aralığı Bulma:\n    \n   * **Min Değer**, sıralanmış bir sayısal dizide dizinin ilk indeksinde bulunan sayıdır.\n   \n   * **Max Değer**, sıralanmış bir sayısal dizide dizinin son indeksinde bulunan sayıdır.\n   \n   * **Değer Aralığı**, sıralanmış bir sayısal dizide dizinin en büyük değeri ile en küçük değerinin farkıdır. **Değer Aralığı = Max Değer - Min Değer**\n   \n   * **Örnek:** Dizi=[1000,3000,5000,6000,9000,12000] diye bir dizimiz olsun. \n     \n     **Min Değer=1000**'dir.    **Max Değer=12000**'dir.    **Değer Aralığı=12000-1000=11000**'dir.","metadata":{}},{"cell_type":"code","source":"def find_MinValue(array): #find_MinValue fonksiyonu parametre olarak verilen diziyi sıralar ve min değeri sonuç olarak döndürür.\n    return array.min()\n\n\ndef find_MaxValue(array): #find_MaxValue fonksiyonu parametre olarak verilen diziyi sıralar ve max değeri sonuç olarak döndürür.\n    return array.max()\n\n\ndef find_ValueRange(array): #find_ValueRange fonksiyonu parametre olarak verilen diziyi sıralar ve değer aralığını sonuç olarak döndürür.\n    return array.max()-array.min()\n\narray=data[\"petal_length\"]\n\nprint(\"The min value of this series of numbers= {}\".format(find_MinValue(array)))\nprint(\"The max value of this series of numbers= {}\".format(find_MaxValue(array)))\nprint(\"The ralue range of this series of numbers= {}\".format(find_ValueRange(array)))","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:24:13.543757Z","iopub.execute_input":"2024-03-19T12:24:13.544887Z","iopub.status.idle":"2024-03-19T12:24:13.554318Z","shell.execute_reply.started":"2024-03-19T12:24:13.544843Z","shell.execute_reply":"2024-03-19T12:24:13.553257Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"The min value of this series of numbers= 1.0\nThe max value of this series of numbers= 6.9\nThe ralue range of this series of numbers= 5.9\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 5-) Standart Sapma Bulma:\n\n   * **Standart sapma**, bir veri setinin ne kadar dağınık veya değişken olduğunu ölçen bir istatistiksel ölçüdür. Bir veri setindeki değerlerin ne kadar birbirinden farklı olduğunu gösterir. Düşük standart sapma, veri setindeki değerlerin birbirine yakın olduğunu gösterirken, yüksek standart sapma ise değerlerin birbirinden uzak olduğunu gösterir.\n   \n   * **Standart Sapma** bir dizideki sayılarin dizinin aritmetik ortalamasından farklarının karelerinin toplamının dizinin eleman sayısının bir eksiğine bölümünün kareköküdür.\n   \n\n\n![standart-sapma-formul.gif](attachment:4f8f91c7-3993-471d-a229-aac1afcd6b2d.gif) \n**Görüntü Linki**:https://images.app.goo.gl/a4DHuWh1uGnHzLiK9\n","metadata":{},"attachments":{"4f8f91c7-3993-471d-a229-aac1afcd6b2d.gif":{"image/gif":""}}},{"cell_type":"code","source":"def find_standard_deviation(array): # find_standard_deviation fonksiyonu parametre olarak verilen dizinin elemanlarının standart sapmasını değer olarak döndürür.\n\n    total1=0\n    for i in array:\n        total1+=(i-find_Average(array))**2  #find_Average fonksiyonu ile ortalama değer bulunur ve her değerden ortalama değer çıkarılır. \n\n    standard_deviation=(total1/(len(array)-1))**(1/2)\n\n    return standard_deviation\n\n\nprint(\"The standard deviation of this series of numbers=\",find_standard_deviation(data[\"sepal_width\"])) ","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:27:52.682728Z","iopub.execute_input":"2024-03-19T12:27:52.683131Z","iopub.status.idle":"2024-03-19T12:27:52.70088Z","shell.execute_reply.started":"2024-03-19T12:27:52.6831Z","shell.execute_reply":"2024-03-19T12:27:52.699561Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"The standard deviation of this series of numbers= 0.4335943113621737\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 6-) Varyans Bulma:\n    \n   * **Varyans**, bir veri kümesinin standart sapmasının karesine eşittir.\n   \n   * **Varyans**, bir veri setindeki değerlerin ortalama etrafında ne kadar dağınık olduğunu ölçen bir istatistiksel ölçüdür. Standart sapma gibi, bir veri setinin değişkenliğini ölçmek için kullanılır. \n","metadata":{}},{"cell_type":"code","source":"def find_variance(array): # find_variance fonksiyonu parametre olarak verilen dizinin varyans değerini döndürür.\n    variance=(find_standard_deviation(array))**2 #find_standard_deviation fonksiyonu ile dizinin standart sapması bulunur ve karesi alınarak varyans hesaplanır.\n    return variance\n\nprint(\"The variance of this series of numbers=\",find_variance(data[\"sepal_width\"]))","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:29:07.924648Z","iopub.execute_input":"2024-03-19T12:29:07.925112Z","iopub.status.idle":"2024-03-19T12:29:07.941081Z","shell.execute_reply.started":"2024-03-19T12:29:07.925077Z","shell.execute_reply":"2024-03-19T12:29:07.939654Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"The variance of this series of numbers= 0.18800402684563763\n","output_type":"stream"}]},{"cell_type":"code","source":"def find_dataLiteracy(array1,array2,array3,array4): # find_dataLiteracy fonksiyonu elimizdeki dizilerin veri okuryazarlığını yapar.\n    print(array1.name,array2.name,array3.name,array4.name)\n    print(\"Average:{} {} {} {}\".format(find_Average(array1),find_Average(array2),find_Average(array3),find_Average(array4)))\n    print(\"Mode:{} {} {} {}\".format(find_Mode(array1),find_Mode(array2),find_Mode(array3),find_Mode(array4)))\n    print(\"Median:{} {} {} {}\".format(find_Median(array1),find_Median(array2),find_Median(array3),find_Median(array4)))\n    print(\"Min:{} {} {} {}\".format(find_MinValue(array1),find_MinValue(array2),find_MinValue(array3),find_MinValue(array4)))\n    print(\"Max:{} {} {} {}\".format(find_MaxValue(array1),find_MaxValue(array2),find_MaxValue(array3),find_MaxValue(array4)))\n    print(\"ValueRange:{} {} {} {}\".format(find_ValueRange(array1),find_ValueRange(array2),find_ValueRange(array3),find_ValueRange(array4)))\n    print(\"Std:{} {} {} {}\".format(find_standard_deviation(array1),find_standard_deviation(array2),find_standard_deviation(array3),find_standard_deviation(array4)))\n    print(\"Variance:{} {} {} {}\".format(find_variance(array1),find_variance(array2),find_variance(array3),find_variance(array4)))\n    \n    \nfind_dataLiteracy(data[\"sepal_length\"],data[\"sepal_width\"],data[\"petal_length\"],data[\"petal_width\"])\n    \n    \n    \n    \n    \n    \n    \n    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-03-19T12:29:46.944378Z","iopub.execute_input":"2024-03-19T12:29:46.944825Z","iopub.status.idle":"2024-03-19T12:29:47.024985Z","shell.execute_reply.started":"2024-03-19T12:29:46.94479Z","shell.execute_reply":"2024-03-19T12:29:47.023653Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"sepal_length sepal_width petal_length petal_width\nAverage:5.843333333333335 3.0540000000000007 3.7586666666666693 1.1986666666666672\nMode:5.0 3.0 1.5 0.2\nMedian:6.5 2.95 4.35 1.35\nMin:4.3 2.0 1.0 0.1\nMax:7.9 4.4 6.9 2.5\nValueRange:3.6000000000000005 2.4000000000000004 5.9 2.4\nStd:0.8280661279778629 0.4335943113621737 1.7644204199522617 0.7631607417008414\nVariance:0.6856935123042505 0.18800402684563763 3.1131794183445156 0.5824143176733783\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}